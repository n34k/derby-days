// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  imagePublicId String?
  moneyRaised   Float      @default(0)
  walkoutSong   String?    @default("")
  globalRole    GlobalRole @default(BROTHER)

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  teamId    String?
  team      Team?      @relation(fields: [teamId], references: [id])
  donations Donation[]

  headCoachOf Team? @relation("HeadCoach")

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  AdPurchase     AdPurchase[]
  TshirtPurchase TshirtPurchase[]
  DraftPick      DraftPick?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model DerbyStats {
  id             String   @id
  status         DerbyStatus @default(CREATED)
  totalRaised    Float    @default(0)
  finalStandings String[]
  updatedAt      DateTime @updatedAt
}

model BrotherEmails {
  email     String   @id
  createdAt DateTime @default(now())
  accountMade Boolean  @default(false)
}

model Team {
  id   String @id @default(cuid())
  name String

  headCoachId String? @unique
  headCoach   User?   @relation("HeadCoach", fields: [headCoachId], references: [id])

  derbyDarlingName     String?
  derbyDarlingImageUrl String?
  derbyDarlingPublicId String?

  members User[]

  donations   Donation[]
  draftPicks  DraftPick[]
  points      Int         @default(0)
  tshirtsSold Int         @default(0)
  moneyRaised Float       @default(0)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  AdPurchase     AdPurchase[]
  TshirtPurchase TshirtPurchase[]
}

model Donation {
  id        String   @id @default(cuid())
  userId    String?
  teamId    String?
  email     String
  name      String
  note      String?
  amount    Float
  stripeId  String?   @unique
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])
}

model AdPurchase {
  id         String   @id @default(cuid())
  userId     String?
  teamId     String?
  email      String
  name       String
  note       String?
  size       String
  amount     Float
  stripeId   String?   @unique
  createdAt  DateTime @default(now())
  adUrl      String?
  adPublicId String?

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])
}

model TshirtPurchase {
  id        String   @id @default(cuid())
  userId    String?
  teamId    String?
  email     String
  name      String?
  sizeQty   Json
  stripeId  String   @unique
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])
}

model Draft {
  id            String      @id @default(cuid())
  name          String
  status        DraftStatus @default(NOT_STARTED)
  roundCount    Int
  currentPickNo Int         @default(1)
  startedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  teamOrder     String[]
  deadlineAt    DateTime?

  picks DraftPick[]
}

model DraftPick {
  id            String     @id @default(cuid())
  draftId       String
  teamId        String
  userId        String  @unique
  overallPickNo Int
  round         Int
  pickInRound   Int
  status        PickStatus @default(ANNOUNCED)
  announcedAt   DateTime   @default(now())

  draft Draft @relation(fields: [draftId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
  user  User  @relation(fields: [userId], references: [id]) 

  @@unique([draftId, userId]) // a brother once per draft
  @@unique([draftId, overallPickNo]) // one pick per overall slot
  @@unique([draftId, round, pickInRound]) // one pick per round slot
  @@index([draftId, teamId])
  @@index([draftId, round])
}

model Product {
  productId String @id
  name      String
  price     Int // in cents
  priceId   String @unique // Stripe Price ID
  category  String // "ads" or "tshirt"
}

enum GlobalRole {
  ADMIN
  JUDGE
  BROTHER
  HEAD_COACH
}

enum DraftStatus {
  NOT_CREATED
  NOT_STARTED
  ONGOING
  PAUSED
  COMPLETE
}

enum PickStatus {
  ANNOUNCED
  VOIDED
}

enum DerbyStatus {
  CREATED
  POST_DRAFT
  COMPLETE
}

