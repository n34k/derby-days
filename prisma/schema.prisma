// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  imagePublicId String?
  moneyRaised   Float      @default(0)
  walkoutSong   String?    @default("")
  globalRole    GlobalRole @default(BROTHER)

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  teamId               String?
  team                 Team?                 @relation(fields: [teamId], references: [id])
  donations            Donation[]
  draftPick            DraftPick?
  externalTransactions ExternalTransaction[]

  headCoachOf    Team? @relation("HeadCoach")
  derbyDarlingOf Team? @relation("DerbyDarling")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Team {
  id   String @id @default(cuid())
  name String

  headCoachId    String? @unique
  headCoach      User?   @relation("HeadCoach", fields: [headCoachId], references: [id])
  derbyDarlingId String? @unique
  derbyDarling   User?   @relation("DerbyDarling", fields: [derbyDarlingId], references: [id])
  members        User[]

  donations            Donation[]
  externalTransactions ExternalTransaction[]
  draftPicks           DraftPick[]
  points               Int                   @default(0)
  tshirtsSold          Int                   @default(0)
  moneyRaised          Float                 @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Donation {
  id        String   @id @default(cuid())
  userId    String
  teamId    String?
  amount    Float
  stripeId  String   @unique
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])
}

model ExternalTransaction {
  id        String          @id @default(cuid())
  email     String
  name      String?
  type      TransactionType
  amount    Float
  teamId    String?
  userId    String?
  stripeId  String          @unique
  createdAt DateTime        @default(now())

  team Team? @relation(fields: [teamId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

model DraftPick {
  id         String @id @default(cuid())
  teamId     String
  userId     String @unique
  pickNumber Int

  team Team  @relation(fields: [teamId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

model Product {
  productId String   @id
  name      String
  price     Int // in cents
  priceId   String // Stripe Price ID
  category  String // "ads" or "tshirt"
  createdAt DateTime @default(now())
}

enum GlobalRole {
  ADMIN
  JUDGE
  BROTHER
  DERBY_DARLING
  HEAD_COACH
}

enum TransactionType {
  DONATION
  TSHIRT
  AD
}
